import tempfile
import os
import pytest

from src.tuut_file import TuutFile
from src.utils.misc import find_file_path, find_main_function_range, include_lib, comment_out, logs_to_str

def test_find_file_path():
    """
    Tests the `find_file_path()` function with three test cases:
        1. Test that the function returns the correct file path for an existing file.
        2. Test that the function raises a SystemExit exception for a non-existent file with start_dir provided.
        3. Test that the function raises a SystemExit exception for a non-existent file without start_dir provided.
    """

    with tempfile.TemporaryDirectory() as temp_dir:
        known_file_path = os.path.join(temp_dir, 'test_file.cpp')
        with open(known_file_path, 'a', encoding='utf-8'):
            pass

        # Test that the function returns the correct file path
        valid_test_file = find_file_path('test_file.cpp', temp_dir)
        assert valid_test_file == known_file_path

        # Test that the function raises a SystemExit exception for a non-existent file with start_dir provided
        with pytest.raises(SystemExit) as exc_info:
            find_file_path('nonexistent_file.cpp', temp_dir)
        assert exc_info.value.code == 1

        # Test that the function raises a SystemExit exception for a non-existent file without start_dir provided
        with pytest.raises(SystemExit) as exc_info:
            find_file_path('nonexistent_file.cpp')
        assert exc_info.value.code == 1

        # Test that the function raises a SystemExit exception for a different file extension
        with pytest.raises(SystemExit) as exc_info:
            find_file_path('test_file.m', temp_dir)
        assert exc_info.value.code == 1

def test_find_main_function_range_main_present():
    """
    Tests the `find_main_function_range()` function through checking if
    the main is present in a cpp file with a 'main()' function
    """
    assert find_main_function_range(find_file_path("if-statement-1.cpp")) == (True, 12, 17)

def test_find_main_function_range_main_absent():
    """
    Tests the `find_main_function_range()` function through checking if
    the main is present in a cpp file with no 'main()' function
    """
    assert find_main_function_range(find_file_path("address_memory.cpp")) == (False, 0, 0)

def test_include_lib():
    """
    Tests the `include_lib()` function through checking if
    the if-statement-1.cpp file contains the correct library import
    """
    tuut = TuutFile(find_file_path("if-statement-1.cpp"))
    with open(tuut.path_file, 'r', encoding='utf-8') as file1:
        with tempfile.NamedTemporaryFile(mode='w', suffix='.cpp', encoding='utf-8', delete=False) as file2:
            for line in file1:
                file2.write(line)
            file2_path = file2.name

    include_lib(file2_path, file2_path, '#include <stddef.h>')    
    with open(file2_path, 'r', encoding='utf-8') as file:
        file_contents = file.read()
        assert '#include <stddef.h>' in file_contents

def test_comment_out():
    """
    Tests the `comment_out()` function through checking if
    the 'function_with_if()' method inside if-statement-1.cpp is commented out
    """
    tuut = TuutFile(find_file_path("if-statement-1.cpp"))
    with open(tuut.path_file, 'r', encoding='utf-8') as file1:
        with tempfile.NamedTemporaryFile(mode='w', suffix='.cpp', encoding='utf-8', delete=False) as file2:
            for line in file1:
                file2.write(line)
            file2_path = file2.name

    comment_out(file2_path, 3, 10)
    with open(file2_path, 'r', encoding='utf-8') as file:
        file_contents = file.readlines()
        assert '/*int function_with_if(int x)' in file_contents[2]
        assert '}*/' in file_contents[9]

    if os.path.exists(file2_path):
        os.remove(file2_path)

def test_logs_to_str():
    """
    Test case for the logs_to_str function.

    This test case verifies the behavior of the logs_to_str function by providing a list of build logs
    and comparing the returned string with the expected output.

    The build_logs list represents the logs obtained from a build process, where each entry is a dictionary
    containing a 'stream' key and its associated log message.

    The expected_output is the string that is expected to be generated by concatenating the log messages
    in the build_logs list.

    Expected behavior:
    - The logs_to_str function should properly parse the build logs and concatenate the log messages into a single string.
    - The generated string should match the expected_output.

    """
    build_logs = [
        {'stream': ' ---> Using cache\n'},
        {'stream': ' ---> b22c54c1e895\n'},
        {'stream': 'Step 6/11 : RUN pip3 install clang==11\n'},
        {'stream': ' ---> Using cache\n'},
        {'stream': ' ---> 97a950ee98e0\n'},
        {'stream': '\n'},
        {'stream': 'Step 7/11 : RUN pip3 install libclang==11\n'},
        {'stream': ' ---> Using cache\n'},
        {'stream': ' ---> 998ef9a860b6\n'},
        {'stream': 'Step 8/11 : RUN pip3 install pytest\n'},
        {'stream': ' ---> Using cache\n'},
        {'stream': ' ---> ebc8fb76a7b7\n'},
        {'stream': 'Step 9/11 : RUN pip3 install tabulate\n'},
        {'stream': ' ---> Using cache\n'},
        {'stream': ' ---> 16fd342ad66c\n'},
        {'stream': 'Step 10/11 : ADD . /home/consept/src/concolic\n'},
        {'stream': ' ---> Using cache\n'},
        {'stream': ' ---> a26e8da71703\n'},
        {'stream': 'Step 11/11 : WORKDIR /home/consept\n'},
        {'stream': ' ---> Running in c7bd26d722ee\n'},
        {'stream': ' ---> cdfc38c0da3b\n'},
        {'stream': 'Successfully built cdfc38c0da3b\n'},
        {'stream': 'Successfully tagged image_consept_concolic:latest\n'}
    ]

    expected_output = (
        ' ---> Using cache\n'
        ' ---> b22c54c1e895\n'
        'Step 6/11 : RUN pip3 install clang==11\n'
        ' ---> Using cache\n'
        ' ---> 97a950ee98e0\n'
        'Step 7/11 : RUN pip3 install libclang==11\n'
        ' ---> Using cache\n'
        ' ---> 998ef9a860b6\n'
        'Step 8/11 : RUN pip3 install pytest\n'
        ' ---> Using cache\n'
        ' ---> ebc8fb76a7b7\n'
        'Step 9/11 : RUN pip3 install tabulate\n'
        ' ---> Using cache\n'
        ' ---> 16fd342ad66c\n'
        'Step 10/11 : ADD . /home/consept/src/concolic\n'
        ' ---> Using cache\n'
        ' ---> a26e8da71703\n'
        'Step 11/11 : WORKDIR /home/consept\n'
        ' ---> Running in c7bd26d722ee\n'
        ' ---> cdfc38c0da3b\n'
        'Successfully built cdfc38c0da3b\n'
        'Successfully tagged image_consept_concolic:latest\n'
    )

    assert logs_to_str(build_logs) == expected_output
